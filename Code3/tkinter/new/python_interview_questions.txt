              Python Test


Question 1
 
What is Python really ? You can make comparision to other language.


Question 2

Write code to - 

def print_directory_contents(sPath):
    """
    This function takes the name of a directory 
    and prints out the paths files within that 
    directory as well as any files contained in 
    contained directories. 

    This function is similar to os.walk. Please don't
    use os.walk in your answer. We are interested in your 
    ability to work with nested structures. 
    """

Question 3

How are the functions help() and dir() different?


Question 4

Looking at the below code, write down the final values of A0, A1, ...An.

A0 = dict(zip(('a','b','c','d','e'),(1,2,3,4,5)))
A1 = range(10)
A2 = sorted([i for i in A1 if i in A0])
A3 = sorted([A0[s] for s in A0])
A4 = [i for i in A1 if i in A3]
A5 = {i:i*i for i in A1}
A6 = [[i,i*i] for i in A1]


Question 5

How do you keep track of different versions of your code?


Question 6


Write the output of the following code - 
def f(x,l=[]):
    for i in range(x):
        l.append(i*i)
    print(l) 


Question 7

Consider the following code, what will it output?

class A(object):
    def go(self):
        print("go A go!")
    def stop(self):
        print("stop A stop!")
    def pause(self):
        raise Exception("Not Implemented")

class B(A):
    def go(self):
        super(B, self).go()
        print("go B go!")

class C(A):
    def go(self):
        super(C, self).go()
        print("go C go!")
    def stop(self):
        super(C, self).stop()
        print("stop C stop!")

class D(B,C):
    def go(self):
        super(D, self).go()
        print("go D go!")
    def stop(self):
        super(D, self).stop()
        print("stop D stop!")
    def pause(self):
        print("wait D wait!")

class E(B,C): pass

a = A()
b = B()
c = C()
d = D()
e = E()

# specify output from here onwards

a.go()
b.go()
c.go()
d.go()
e.go()

a.stop()
b.stop()
c.stop()
d.stop()
e.stop()

a.pause()
b.pause()
c.pause()
d.pause()
e.pause()

f(2)
f(3,[3,2,1])
f(3)


Question 8

What does this stuff mean: *args, **kwargs? And why would we use it?


Question 9

Consider the following code, what will it output?


class Node(object):
    def __init__(self,sName):
        self._lChildren = []
        self.sName = sName
    def __repr__(self):
        return "<Node '{}'>".format(self.sName)
    def append(self,*args,**kwargs):
        self._lChildren.append(*args,**kwargs)
    def print_all_1(self):
        print(self)
        for oChild in self._lChildren:
            oChild.print_all_1()
    def print_all_2(self):
        def gen(o):
            lAll = [o,]
            while lAll:
                oNext = lAll.pop(0)
                lAll.extend(oNext._lChildren)
                yield oNext
        for oNode in gen(self):
            print(oNode)

oRoot = Node("root")
oChild1 = Node("child1")
oChild2 = Node("child2")
oChild3 = Node("child3")
oChild4 = Node("child4")
oChild5 = Node("child5")
oChild6 = Node("child6")
oChild7 = Node("child7")
oChild8 = Node("child8")
oChild9 = Node("child9")
oChild10 = Node("child10")

oRoot.append(oChild1)
oRoot.append(oChild2)
oRoot.append(oChild3)
oChild1.append(oChild4)
oChild1.append(oChild5)
oChild2.append(oChild6)
oChild4.append(oChild7)
oChild3.append(oChild8)
oChild3.append(oChild9)
oChild6.append(oChild10)

# specify output from here onwards

oRoot.print_all_1()
oRoot.print_all_2()



Question 10

 Explain Python's pass by references Vs pass by value . (or) Explain about Python's parameter passing mechanism?


Question 11

 As Everything in Python is an Object, Explain the characteristics of Python's Objects ?

Question 12

Which statement of Python is used whenever a statement is required syntactically but the program needs no action ?

Question 13

What is a Python module ?


Question 14

Name the File-related modules in Python ?

Question 15

Explain the use of with statement ?

Question 16

Explain all the file processing modes supported by Python ?

Question 17

When does a dictionary is used instead of a list?

Question 18

 What is the use of enumerate() in Python?

Question 19

 How do you perform pattern matching in Python? Explain

Question 20

 Explain split(), sub(), subn() methods of re-module

Question 21

 What is difference b/w match() and search() function of python

Question 22

How to display the contents of text file in reverse order?

Question 23

 Is Python object oriented? what is object oriented programming?

Question 24

What is a Class? How do you create it in Python?

Question 25

What are Exception Handling? How do you achieve it in Python?

Question 26

Explain Inheritance in Python with an example ?

Question 27

How instance variables are different from class variables?

Question 28

Explain different ways to trigger / raise exceptions in your python script ?

Question 29

How is Inheritance and Overriding methods are related?

Question 30

Which methods of Python are used to determine the type of instance and inheritance?

Question 31

In the case of Multiple inheritance, if a child class C is derived from two base classes say A and B as: class C(A, B): -- which parent class's method will be invoked by the interpreter whenever object of class C calls a method func() that is existing in both the parent classes say A and B and does not exist in class C as

Question 32

 Differentiate between .py and .pyc files?

Question 33

How to retrieve data from a table in MySQL database through Python code? Explain.

Question 34

How would you define a protected member in a Python class?


Question 35

How do you remove duplicates from a list?

Question 36

Differentiate between append() and extend() methods. ?

Question 37

How do you check the file existence and their types in Python?

Question 38 

Name few methods that are used to implement Functionally Oriented Programming in Python? (reduce,map,filter)

Question 39

Explain lambda function with 5 examples ?

Question 40

How Python is interpreted?

Question 41

How Python is interpreted?

Question 42 

How memory is managed in Python?

Question 43 

What is the difference between list and tuple?

Question 44

What are the built-in type does python provides?

Question 45

 What is namespace in Python?

Question 46

In Python what is slicing?

Question 47

What is docstring in Python?

Question 48


What is negative index in Python?

Question 49

What is module and package in Python?

Question 50

Mention what are the rules for local and global variables in Python?

Question 51

Explain how can you make a Python Script executable on Unix?


Question 52

Explain how to delete a file in Python?


Question 53

Explain how can you generate random numbers in Python?

Mention the use of // operator in Python?

Question 54

Mention five benefits of using Python?

Question 55

Mention the use of the split function in Python?



